{"ast":null,"code":"var _jsxFileName = \"/home/kishlay/Desktop/QuestSearch/client/src/component/QuestionCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './QuestionCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionCard = ({\n  question\n}) => {\n  _s();\n  const [selectedOption, setSelectedOption] = useState(null);\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n  };\n  const getOptionClass = option => {\n    if (selectedOption === option) {\n      return option.iscorrectanswer ? 'selected' : 'incorrect';\n    }\n    return '';\n  };\n  if (question.type === 'MCQ') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: question.optionsList && question.optionsList.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleOptionClick(option),\n          className: getOptionClass(option),\n          children: option.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  } else if (question.type === 'ANAGRAM') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: question.blocksList && question.blocksList.map((block, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: block.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Unknown Question Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(QuestionCard, \"JA8CxE9ZrczvRffCFoauEAbBIYg=\");\n_c = QuestionCard;\nexport default QuestionCard;\nvar _c;\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","QuestionCard","question","_s","selectedOption","setSelectedOption","handleOptionClick","option","getOptionClass","iscorrectanswer","type","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","optionsList","map","index","onClick","text","blocksList","block","_c","$RefreshReg$"],"sources":["/home/kishlay/Desktop/QuestSearch/client/src/component/QuestionCard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './QuestionCard.css';\n\nconst QuestionCard = ({ question }) => {\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const handleOptionClick = (option) => {\n    setSelectedOption(option);\n  };\n\n  const getOptionClass = (option) => {\n    if (selectedOption === option) {\n      return option.iscorrectanswer ? 'selected' : 'incorrect';\n    }\n    return '';\n  };\n\n  if (question.type === 'MCQ') {\n    return (\n      <div className=\"question-card\">\n        <h3>{question.title}</h3>\n        <p>{question.type}</p>\n        <ul>\n          {question.optionsList && question.optionsList.map((option, index) => (\n            <li\n              key={index}\n              onClick={() => handleOptionClick(option)}\n              className={getOptionClass(option)}\n            >\n              {option.text}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  } else if (question.type === 'ANAGRAM') {\n    return (\n      <div className=\"question-card\">\n        <h3>{question.title}</h3>\n        <p>{question.type}</p>\n        <ul>\n          {question.blocksList && question.blocksList.map((block, index) => (\n            <li key={index}>{block.text}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"question-card\">\n        <h3>Unknown Question Type</h3>\n        <p>{question.title}</p>\n        <p>{question}</p>\n      </div>\n    );\n  }\n};\n\nexport default QuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}