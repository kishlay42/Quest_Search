{"ast":null,"code":"import { QuestionServiceClient } from './questionpb/questions_grpc_web_pb';\nimport { QuestionsRequest } from './questionpb/questions_pb';\n\n// Create a gRPC client instance\nconst client = new QuestionServiceClient(\"http://localhost:8080\" // Note the use of http:// for grpc-web\n);\n\n// Function to fetch questions by title and type\nexport function getQuestions(title, type, callback) {\n  const request = new QuestionsRequest();\n  request.setTitle(title);\n  request.setType(type);\n  client.getQuestions(request, {}, (error, response) => {\n    if (error) {\n      console.error(\"Error in GetQuestions:\", error);\n      callback(error, null);\n    } else {\n      const questions = response.toObject().questionsList;\n      console.log(\"Fetched Questions:\", questions);\n      questions.forEach((question, index) => {\n        console.log(`Question ${index + 1}:`, question);\n        if (question.options) {\n          console.log(`Options for Question ${index + 1}:`, question.options);\n        }\n        if (question.blocks) {\n          console.log(`Blocks for Question ${index + 1}:`, question.blocks);\n        }\n      });\n      callback(null, response.toObject());\n    }\n  });\n}","map":{"version":3,"names":["QuestionServiceClient","QuestionsRequest","client","getQuestions","title","type","callback","request","setTitle","setType","error","response","console","questions","toObject","questionsList","log","forEach","question","index","options","blocks"],"sources":["/home/kishlay/Desktop/QuestSearch/client/src/grpcClient.js"],"sourcesContent":["import { QuestionServiceClient } from './questionpb/questions_grpc_web_pb';\nimport { QuestionsRequest } from './questionpb/questions_pb';\n\n// Create a gRPC client instance\nconst client = new QuestionServiceClient(\n  \"http://localhost:8080\" // Note the use of http:// for grpc-web\n);\n\n// Function to fetch questions by title and type\nexport function getQuestions(title, type, callback) {\n  const request = new QuestionsRequest();\n  request.setTitle(title);\n  request.setType(type);\n\n  client.getQuestions(request, {}, (error, response) => {\n    if (error) {\n      console.error(\"Error in GetQuestions:\", error);\n      callback(error, null);\n    } else {\n      const questions = response.toObject().questionsList;\n      console.log(\"Fetched Questions:\", questions);\n      questions.forEach((question, index) => {\n        console.log(`Question ${index + 1}:`, question);\n        if (question.options) {\n          console.log(`Options for Question ${index + 1}:`, question.options);\n        }\n        if (question.blocks) {\n          console.log(`Blocks for Question ${index + 1}:`, question.blocks);\n        }\n      });\n      callback(null, response.toObject());\n    }\n  });\n}"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,oCAAoC;AAC1E,SAASC,gBAAgB,QAAQ,2BAA2B;;AAE5D;AACA,MAAMC,MAAM,GAAG,IAAIF,qBAAqB,CACtC,uBAAuB,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,SAASG,YAAYA,CAACC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAClD,MAAMC,OAAO,GAAG,IAAIN,gBAAgB,CAAC,CAAC;EACtCM,OAAO,CAACC,QAAQ,CAACJ,KAAK,CAAC;EACvBG,OAAO,CAACE,OAAO,CAACJ,IAAI,CAAC;EAErBH,MAAM,CAACC,YAAY,CAACI,OAAO,EAAE,CAAC,CAAC,EAAE,CAACG,KAAK,EAAEC,QAAQ,KAAK;IACpD,IAAID,KAAK,EAAE;MACTE,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CJ,QAAQ,CAACI,KAAK,EAAE,IAAI,CAAC;IACvB,CAAC,MAAM;MACL,MAAMG,SAAS,GAAGF,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAACC,aAAa;MACnDH,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEH,SAAS,CAAC;MAC5CA,SAAS,CAACI,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;QACrCP,OAAO,CAACI,GAAG,CAAC,YAAYG,KAAK,GAAG,CAAC,GAAG,EAAED,QAAQ,CAAC;QAC/C,IAAIA,QAAQ,CAACE,OAAO,EAAE;UACpBR,OAAO,CAACI,GAAG,CAAC,wBAAwBG,KAAK,GAAG,CAAC,GAAG,EAAED,QAAQ,CAACE,OAAO,CAAC;QACrE;QACA,IAAIF,QAAQ,CAACG,MAAM,EAAE;UACnBT,OAAO,CAACI,GAAG,CAAC,uBAAuBG,KAAK,GAAG,CAAC,GAAG,EAAED,QAAQ,CAACG,MAAM,CAAC;QACnE;MACF,CAAC,CAAC;MACFf,QAAQ,CAAC,IAAI,EAAEK,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAAC;IACrC;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}