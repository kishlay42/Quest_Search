{"ast":null,"code":"import { QuestionServiceClient } from './questionpb/questions_grpc_web_pb';\nimport { QuestionsRequest } from './questionpb/questions_pb';\n\n// Create a gRPC client instance\nconst client = new QuestionServiceClient(\"http://localhost:8080\");\n\n// Function to fetch questions by title and type using async/await\nexport async function getQuestions(title, type, page = 1, pageSize = 10) {\n  const request = new QuestionsRequest();\n  request.setTitle(title);\n  request.setType(type);\n  request.setPage(page);\n  request.setPageSize(pageSize);\n  return new Promise((resolve, reject) => {\n    client.getQuestions(request, {}, (err, response) => {\n      if (err) {\n        console.error(\"Error in GetQuestions:\", err);\n        reject(err);\n      } else {\n        console.log(\"Questions:\", JSON.stringify(response.toObject(), null, 2));\n        resolve(response.toObject());\n      }\n    });\n  });\n}","map":{"version":3,"names":["QuestionServiceClient","QuestionsRequest","client","getQuestions","title","type","page","pageSize","request","setTitle","setType","setPage","setPageSize","Promise","resolve","reject","err","response","console","error","log","JSON","stringify","toObject"],"sources":["/home/kishlay/Desktop/QuestSearch/client/src/grpcClient.js"],"sourcesContent":["import { QuestionServiceClient } from './questionpb/questions_grpc_web_pb';\nimport { QuestionsRequest } from './questionpb/questions_pb';\n\n// Create a gRPC client instance\nconst client = new QuestionServiceClient(\"http://localhost:8080\");\n\n// Function to fetch questions by title and type using async/await\nexport async function getQuestions(title, type, page = 1, pageSize = 10) {\n  const request = new QuestionsRequest();\n  request.setTitle(title);\n  request.setType(type);\n  request.setPage(page);\n  request.setPageSize(pageSize);\n\n  return new Promise((resolve, reject) => {\n    client.getQuestions(request, {}, (err, response) => {\n      if (err) {\n        console.error(\"Error in GetQuestions:\", err);\n        reject(err);\n      } else {\n        console.log(\"Questions:\", JSON.stringify(response.toObject(), null, 2));\n        resolve(response.toObject());\n      }\n    });\n  });\n}"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,oCAAoC;AAC1E,SAASC,gBAAgB,QAAQ,2BAA2B;;AAE5D;AACA,MAAMC,MAAM,GAAG,IAAIF,qBAAqB,CAAC,uBAAuB,CAAC;;AAEjE;AACA,OAAO,eAAeG,YAAYA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,EAAE,EAAE;EACvE,MAAMC,OAAO,GAAG,IAAIP,gBAAgB,CAAC,CAAC;EACtCO,OAAO,CAACC,QAAQ,CAACL,KAAK,CAAC;EACvBI,OAAO,CAACE,OAAO,CAACL,IAAI,CAAC;EACrBG,OAAO,CAACG,OAAO,CAACL,IAAI,CAAC;EACrBE,OAAO,CAACI,WAAW,CAACL,QAAQ,CAAC;EAE7B,OAAO,IAAIM,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCb,MAAM,CAACC,YAAY,CAACK,OAAO,EAAE,CAAC,CAAC,EAAE,CAACQ,GAAG,EAAEC,QAAQ,KAAK;MAClD,IAAID,GAAG,EAAE;QACPE,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEH,GAAG,CAAC;QAC5CD,MAAM,CAACC,GAAG,CAAC;MACb,CAAC,MAAM;QACLE,OAAO,CAACE,GAAG,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACvET,OAAO,CAACG,QAAQ,CAACM,QAAQ,CAAC,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}